#!/usr/bin/python
# Fetch the specified entries.
# Arguments : fh-fetch 	from 	date [to date]
#                     	feeds	*feed-name-regexp*
#			show	feed-title,entry-title,entry-contents

import os
import sys
import glob
import feedparser
import time, datetime
import optparse


fetch_params = { "feed-title": 1, "feed-summary": 1, "feed-link": 1, "entry-title": 1, "entry-subtitle": 1, "entry-link": 1, "entry-content": 1, }

sep = "\t" # the separator used to ...separate each entry of the feed
pattern = "*"

# Display feeds published between those dates

to_date = time.gmtime(time.time())
from_date = time.gmtime(time.time() - 86400)

# date and time parsing code comes from http://www.logarithmic.net/pfh/blog/01162445830

time_formats = ['%H : %M', '%I : %M %p', '%H', '%I %p']

date_formats_with_year = ['%d %m %Y', '%Y %m %d', '%d %B %Y', '%B %d %Y',
                                                  '%d %b %Y', '%b %d %Y',
                          '%d %m %y', '%y %m %d', '%d %B %y', '%B %d %y',
                                                  '%d %b %y', '%b %d %y']

date_formats_without_year = ['%d %B', '%B %d',
                             '%d %b', '%b %d']

def parse_time(string):
    string = string.strip()
    if not string: return None
    
    for format in time_formats:
        try:
            result = time.strptime(string, format)
            return datetime.time(result.tm_hour, result.tm_min)
        except ValueError:
            pass
            
    raise ValueError()

    
def parse_date(string):
    string = string.strip()
    if not string: return None
    
    string = string.replace('/',' ').replace('-',' ').replace(',',' ')
    
    for format in date_formats_with_year:
        try:
            result = time.strptime(string, format)
#            return datetime.date(result.tm_year, result.tm_mon, result.tm_mday)
            return datetime.time(result.tm_year, result.tm_mon, result.tm_mday)
        except ValueError:
            pass

    for format in date_formats_without_year:
        try:
            result = time.strptime(string, format)
            year = datetime.date.today().year
            # return datetime.date(year, result.tm_mon, result.tm_mday)
            return datetime.time(year, result.tm_mon, result.tm_mday)
        except ValueError:
            pass
            
    raise ValueError()


def print_field(s):
    sys.stdout.write(s.encode("utf8").replace('\n', '\t').strip())
    sys.stdout.write(sep)
   

def main():
    global fetch_params, to_date, from_date, pattern

    p = optparse.OptionParser()
    p.add_option("-t",    "--feed-title", action="store", dest="feed_title", help="Show feed title", default=1)
    p.add_option("-s",    "--feed-summary", action="store", dest="feed_summary", help="Show feed summary", default=1)
    p.add_option("-l",    "--feed-link", action="store", dest="feed_link", help="Show feed link", default=1)
    p.add_option("--et",  "--entry-title", action="store", dest="entry_title", help="Show entry title", default=1)
    p.add_option("--es",  "--entry-subtitle", action="store", dest="entry_subtitle", help="Show entry subtitle", default=1)
    p.add_option("--el",  "--entry-link", action="store", dest="entry_link", help="Show entry link", default=1)
    p.add_option("--ec",  "--entry-content", action="store", dest="entry_content", help="Show entry content", default=1)
    p.add_option("--eca", "--entry-category", action="store", dest="entry_category", help="Show entry category", default=1)
    p.add_option("--fd",  "--from-date", action="store", dest="from_date", help="Display entries published after date", default=0)
    p.add_option("--fe",  "--from-epoch", action="store_true", dest="from_epoch", help="Display all the entries in the feed",)
    p.add_option("--td",  "--to-date", action="store", dest="to_date", help="Display entries published before date", default=0)
    p.add_option("-p",    "--pattern", action="store", dest="pattern", help="Display entries matching the following url pattern", default="*")

    options, args = p.parse_args()

    if options.to_date != 0:
        to_date = parse_date(options.to_date)

    if options.from_date != 0:
        from_date = parse_date(options.from_date)

    if options.from_epoch:
        from_date = time.gmtime(0)

    if options.pattern != "*":
        pattern = options.pattern

    dir = glob.iglob(os.environ.get("HOME") + "/.fh/feeds/" + pattern)

    for file in dir:
        feed = feedparser.parse(file)
        
        if options.feed_title:
            if feed.feed.has_key("title"):
                print_field(feed.feed.subtitle)

        if options.feed_link:
                if feed.feed.has_key("link"):
                    print_field(feed.feed.link)

        if options.feed_summary:
                if feed.feed.has_key("summary"):
                    print_field(feed.summary)
            
        print "\n"

        for e in feed.entries:
            if e.date_parsed > from_date and e.date_parsed < to_date:
                if options.entry_title:
                    if feed.feed.has_key("title"):
                        print_field(e.title)
                        
                if options.entry_link:
                        if feed.feed.has_key("links"):
                            print_field(e.links[0]["href"])
                                
                if options.entry_subtitle:
                        if feed.feed.has_key("description"):
                            print_field(e.description)

                if options.entry_category:
                        if feed.feed.has_key("category"):
                            print_field(e.category)
                                
                if options.entry_content:
                        if feed.feed.has_key("content"):
                            print_field(e.content[0].value)
                                
                        print "\n"

if __name__ == "__main__":
    main()
